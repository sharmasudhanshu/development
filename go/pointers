//pointer help us updating the data without creating another copy, example linklist,Trees etc.


package main
import "fmt"

func main() {
	var a = 5.67
	var p = &a

	fmt.Println("Value stored in variable a = ", a)
	fmt.Println("Address of variable a = ", &a)
	fmt.Println("Value stored in variable p = ", p)
	//Dereferencing a Pointer,  here p contains value = address of a , 
	
	 a = 100
	 p = &a

	fmt.Println("a = ", a)
	fmt.Println("p = ", p)
	fmt.Println("*p = ", *p)
	//pointer effect  , across all functions its changes the value of a variable
	 a = 1000
	 p = &a

	fmt.Println("a (before) = ", a)

	// Changing the value stored in the pointed variable through the pointer
	*p = 2000

	fmt.Println("a (after) = ", a)
	
	//Creating a Pointer using the built-in new() function
	
	ptr := new(int) // Pointer to an `int` type
	*ptr = 100

	fmt.Printf("Ptr = %#x, Ptr value = %d\n", ptr, *ptr)
	// pointer  to a pointer
         a = 7.98
	 p = &a
	var pp = &p

	fmt.Println("a = ", a)
	fmt.Println("address of a = ", &a)

	fmt.Println("p = ", p)
	fmt.Println("address of p = ", &p)

	fmt.Println("pp = ", pp)

	// Dereferencing a pointer to pointer
	fmt.Println("*pp = ", *pp)
	fmt.Println("**pp = ", **pp)
	
}




########################################################################################################################
package main
import "fmt"
type person struct {    
    name string
    age  int
}

 func main () {
   m := make(map[string]int)

   m["k1"] = 7
   m["k2"] = 13
   m["3"] = 13

  pt := &m
 fmt.Println(pt) 
 st := person{name: namet, age: 50}
  spt := &st
  
 fmt.Println(spt)


}

################################################################################################

package main

import "fmt"

type Person struct {
    firstName string
    lastName  string
}

func changeName(p *Person) {
    p.firstName = "Bob"
}

func main() {
    person := Person {
        firstName: "Alice",  // firstName assigned value Alice,for struct instance person
        lastName: "Dow",
    }

    changeName(&person) //struct instance person's firstname value is updated to Bob ,using func & pointer calls

    fmt.Println(person)
}


##################################################################################################

// Go program to return the 
// pointer from the function 
package main 
  
import "fmt"
  
// main function 
func main() { 
  
    // calling the function 
    n := rpf() 
  
    // displaying the value 
    fmt.Println("Value of n is: ", *n) 
  
} 
  
// defining function having integer 
// pointer as return type 
func rpf() *int { 
  
    // taking a local variable 
    // inside the function 
    // using short declaration 
    // operator 
    lv := 100 
  
    // returning the address of lv 
    return &lv 
} 


#################################################################################################
