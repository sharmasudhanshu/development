//pointer help us updating the data without creating another copy, example linklist,Trees etc.
package main
import "fmt"
type person struct {    
    name string
    age  int
}

 func main () {
   m := make(map[string]int)

   m["k1"] = 7
   m["k2"] = 13
   m["3"] = 13

  pt := &m
 fmt.Println(pt) 
 st := person{name: namet, age: 50}
  spt := &st
  
 fmt.Println(spt)


}

################################################################################################

package main

import "fmt"

type Person struct {
    firstName string
    lastName  string
}

func changeName(p *Person) {
    p.firstName = "Bob"
}

func main() {
    person := Person {
        firstName: "Alice",  // firstName assigned value Alice,for struct instance person
        lastName: "Dow",
    }

    changeName(&person) //struct instance person's firstname value is updated to Bob ,using func & pointer calls

    fmt.Println(person)
}
