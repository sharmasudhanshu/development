
go get github.com/stretchr/testify/assert

go test ./... -v

mkdir gotests
cd gotests   #### create 2 files in dir /root/gotests   ,  
pwd
/root/gotests

cat main_test.go
package main

import (
    "testing"
)

func TestCalculate(t *testing.T) {
    if Calculate(2) != 4 {
        t.Error("Expected 2 + 2 to equal 4")
    }
}

cat main.go

package main

import (
    "fmt"
)

// Calculate returns x + 2.
func Calculate(x int) (result int) {
    result = x + 2
    return result
}

func main() {
    fmt.Println("Hello World")
}

#########################################################
run test code
pwd
/root/gotests
root@ubuntu18os:~/gotests# go test ./... -v
=== RUN   TestCalculate
--- PASS: TestCalculate (0.00s)
PASS
ok      _/root/gotests  0.003s


###############################################################
now run the test using   "github.com/stretchr/testify/assert" package  , not from simple  code as shown above in main_test.go
but first install development tools for gcc  compiler availabilty ,

apt-get install build-essential -y

package main

import (
    "testing"
    "github.com/stretchr/testify/assert"
)

func TestCalculate(t *testing.T) {
  assert.Equal(t, Calculate(2), 4)
}

########################################################################################################################
cat  main_test.go  ###run for success scenario , 2 + 2 = 4
package main

import (
    "testing"
    "github.com/stretchr/testify/assert"
)

func TestCalculate(t *testing.T) {
  assert.Equal(t, Calculate(2), 4)
}


root@ubuntu18os:~/gotests# go test ./... -v
=== RUN   TestCalculate
--- PASS: TestCalculate (0.00s)
PASS
ok      _/root/gotests  0.005s
root@ubuntu18os:~/gotests# vi main_test.go
root@ubuntu18os:~/gotests# vi main_test.go
cat  main_test.go  ###run for failure scenario , 2 + 2 = 5
package main

import (
    "testing"
    "github.com/stretchr/testify/assert"
)

func TestCalculate(t *testing.T) {
  assert.Equal(t, Calculate(2), 5)
}


root@ubuntu18os:~/gotests# go test ./... -v
=== RUN   TestCalculate
--- FAIL: TestCalculate (0.00s)
    main_test.go:9:
                Error Trace:    main_test.go:9
                Error:          Not equal:
                                expected: 4
                                actual  : 5
                Test:           TestCalculate
FAIL
FAIL    _/root/gotests  0.006s
FAIL

##############################################################################################################
string comparision tests  Hello & Helloc,
cat main.go
package main
import (
    "fmt"
)
// Calculate returns x + 2.
func Calculate(x int) (result int) {
    result = x + 2
    return result
}
func main() {
    fmt.Println("Hello World")
}


cat  main_test.go   
package main
import (
  "testing"
  "github.com/stretchr/testify/assert"
)
func TestSomething(t *testing.T) {
  var a string = "Hello"
  var b string = "Helloc"

  assert.Equal(t, a, b, "The two words should be the same.")

}


failed scenario
root@ubuntu18os:~/gotests# go test ./... -v
=== RUN   TestSomething
--- FAIL: TestSomething (0.00s)
    main_test.go:15:
                Error Trace:    main_test.go:15
                Error:          Not equal:
                                expected: "Hello"
                                actual  : "Helloc"

                                Diff:
                                --- Expected
                                +++ Actual
                                @@ -1 +1 @@
                                -Hello
                                +Helloc
                Test:           TestSomething
                Messages:       The two words should be the same.
FAIL
FAIL    _/root/gotests  0.005s
FAIL


###################################################################################################
 go test ./... -v
=== RUN   TestSomething
--- PASS: TestSomething (0.00s)
PASS
ok      _/root/gotests  0.005s
root@ubuntu18os:~/gotests# cat main_test.go
package main



import (
  "testing"
  "github.com/stretchr/testify/assert"
)

func TestSomething(t *testing.T) {

  var a string = "Hello"
  var b string = "Hello"

  assert.Equal(t, a, b, "The two words should be the same.")

}

#########################################################################################
